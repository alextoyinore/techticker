
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is part of the CMS team.
    function isCMSUser() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return role in ['admin', 'superadmin', 'editor', 'writer'];
    }

    // Publicly readable collections
    match /articles/{articleId} {
      // Anyone can read published articles
      allow read: if resource.data.status == 'Published';
      // Only CMS users can write
      allow write: if request.auth.uid != null && isCMSUser();
    }

    match /pages/{pageId} {
       // Anyone can read published pages
      allow read: if resource.data.status == 'Published';
      // Only CMS users can write
      allow write: if request.auth.uid != null && isCMSUser();
    }
    
    match /comments/{commentId} {
      // Anyone can read approved comments
      allow read: if resource.data.status == 'Approved';
      // Any authenticated user can create a comment (will be pending)
      allow create: if request.auth.uid != null;
      // Only CMS users can update/delete comments
      allow update, delete: if request.auth.uid != null && isCMSUser();
    }
    
    // Admin-only collections that require a CMS role to access.
    match /layouts/{docId} {
      allow read, write: if request.auth.uid != null && isCMSUser();
    }
    
    match /widgets/{docId} {
      allow read, write: if request.auth.uid != null && isCMSUser();
    }

    match /categories/{docId} {
      allow read, write: if request.auth.uid != null && isCMSUser();
    }
    
    // Users can update their own profile. CMS users can read all profiles.
    match /users/{userId} {
      allow read: if request.auth.uid != null && isCMSUser();
      allow update: if request.auth.uid == userId;
      // Create/delete is handled by secure cloud functions.
    }
    
    // Allow authenticated users to trigger emails.
    match /mail/{docId} {
        allow create: if request.auth.uid != null;
    }
  }
}
