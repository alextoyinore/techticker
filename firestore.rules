
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has specific roles.
    function hasRole(allowedRoles) {
      // Ensure the user is authenticated before checking role.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in allowedRoles;
    }

    // Default rule: deny all reads and writes unless explicitly allowed below.
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS Collection
    // Users can manage their own document, admins can list all users.
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow get, update: if request.auth.uid == userId;
      allow list: if hasRole(['admin', 'superadmin']);
    }

    // ARTICLES Collection
    // Public can read published articles. Writers and higher roles can manage content.
    match /articles/{articleId} {
      allow get: if resource.data.status == 'Published' || hasRole(['writer', 'editor', 'admin', 'superadmin']);
      allow list: if hasRole(['writer', 'editor', 'admin', 'superadmin']);
      allow create, update: if hasRole(['writer', 'editor', 'admin', 'superadmin']);
      allow delete: if hasRole(['admin', 'superadmin']);
    }

    // COMMENTS Collection
    // Public can submit comments and read approved ones. Editors and higher can moderate.
    match /comments/{commentId} {
      // `list` is open, but `get` is secure. This allows public queries for approved comments.
      // Firestore checks the `get` rule for each document returned by a list query.
      allow list: if true;
      allow get: if resource.data.status == 'Approved' || hasRole(['editor', 'admin', 'superadmin']);
      allow create: if request.auth != null;
      allow update, delete: if hasRole(['editor', 'admin', 'superadmin']);
    }

    // CATEGORIES Collection
    // Public can read, editors and higher can write.
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if hasRole(['editor', 'admin', 'superadmin']);
    }
    
    // WIDGETS Collection
    // Public can read, editors and higher can write.
    match /widgets/{widgetId} {
      allow read: if true;
      allow write: if hasRole(['editor', 'admin', 'superadmin']);
    }
  }
}
