rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin/privileged roles
    function hasAdminRole() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole in ['admin', 'superadmin', 'editor', 'writer'];
    }

    // Users Collection Rules
    match /users/{userId} {
      // Allow user document creation only if the UID matches.
      allow create: if request.auth.uid == userId;

      // Allow users to read their own data. Admins can read any user's data.
      allow read: if request.auth.uid == userId || hasAdminRole();

      // Allow users to update only their own non-sensitive data.
      // Admins can update any field, including the role.
      allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL'])) || hasAdminRole();
      
      // Only admins can delete user accounts from the database.
      allow delete: if hasAdminRole();
    }

    // Comments Collection Rules
    match /comments/{commentId} {
      // Allow authenticated users to create comments.
      // - The authorId must match their own UID.
      // - The initial status must be 'Pending'.
      allow create: if request.auth != null
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.status == 'Pending';

      // Only admins can read, update, or delete comments for moderation.
      allow read, update, delete: if hasAdminRole();
    }
  }
}
